name: prek-action
description: Run pre-commit hooks using prek
inputs:
  extra-args:
    description: Options to pass to `prek run`
    required: false
    default: '--all-files'
  extra_args:
    description: Options to pass to `prek run` (deprecated, use extra-args)
    required: false
  install-only:
    description: Only install prek, do not run it
    required: false
    default: 'false'
  prek-version:
    description: Version of prek to install (e.g., '0.2.1', 'latest')
    required: false
    default: 'latest'
  working-directory:
    description: The working directory to run prek in
    required: false
    default: '.'
  token:
    description: GitHub token to avoid API rate limiting
    required: false
    default: ${{ github.token }}

outputs:
  prek-version:
    description: The version of prek that was installed
    value: ${{ steps.resolve.outputs.version }}
runs:
  using: composite
  steps:
  - name: Resolve version
    id: resolve
    run: |
      if [[ "${PREK_VERSION}" = "latest" ]]; then
        PREK_VERSION=$(gh api repos/j178/prek/releases/latest --jq '.tag_name')
      fi
      VERSION="${PREK_VERSION#v}"
      VERSION="v${VERSION}"
      echo "version=${VERSION}" >> $GITHUB_OUTPUT
    shell: bash
    env:
      PREK_VERSION: ${{ inputs.prek-version }}
      GH_TOKEN: ${{ inputs.token }}
  - name: Install prek
    run: |
      # Installing prek

      echo "::group::Installing prek ${PREK_VERSION}"
      export PREK_UNMANAGED_INSTALL=1
      export PREK_INSTALL_DIR="$RUNNER_TOOL_CACHE/prek/${PREK_VERSION}/$RUNNER_ARCH"
      mkdir -p "$PREK_INSTALL_DIR"
      curl --proto '=https' --tlsv1.2 -LsSf https://github.com/j178/prek/releases/download/${PREK_VERSION}/prek-installer.sh | sh
      echo "$PREK_INSTALL_DIR" >> $GITHUB_PATH
      echo "::endgroup::"
    shell: bash
    if: runner.os != 'Windows'
    env:
      PREK_VERSION: ${{ steps.resolve.outputs.version }}
  - name: Install prek (Windows)
    run: |
      Write-Host "::group::Installing prek $env:PREK_VERSION"
      $env:PREK_UNMANAGED_INSTALL = "1"
      $env:PREK_INSTALL_DIR = "$env:RUNNER_TOOL_CACHE\prek\$env:PREK_VERSION\$env:RUNNER_ARCH"
      New-Item -ItemType Directory -Force -Path $env:PREK_INSTALL_DIR
      Invoke-RestMethod https://github.com/j178/prek/releases/download/$env:PREK_VERSION/prek-installer.ps1 | Invoke-Expression
      Add-Content -Path $env:GITHUB_PATH -Value $env:PREK_INSTALL_DIR
      Write-Host "::endgroup::"
    shell: pwsh
    if: runner.os == 'Windows'
    env:
      PREK_VERSION: ${{ steps.resolve.outputs.version }}
  - name: Setup cache
    uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
    with:
      path: |
        ~/.cache/prek
        ~\AppData\Local\prek
      # `env.pythonLocation` is set by `actions/setup-python`, pointing to the directory where Python is installed.
      # prek doesn't require Python, but the hooks it runs often do (e.g., pre-commit hooks), changing the Python version makes Python virtual environments invalid.
      # So we include it in the cache key to avoid using invalid caches.
      key: prek-v1|${{ runner.os }}|${{ runner.arch }}|${{ env.pythonLocation }}|${{ hashFiles(format('{0}/**/.pre-commit-config.yaml', inputs.working-directory)) }}
    if: inputs.install-only == 'false'
  - name: Run prek
    run: |
      import shlex
      import sys
      import os

      cmd = ['prek', 'run', '--show-diff-on-failure', '--color=always']

      extra_args = os.environ['EXTRA_ARGS']
      if extra_args:
          try:
              parsed_args = shlex.split(extra_args)
              cmd.extend(parsed_args)
          except ValueError as e:
              print(f'Error parsing extra-args: {e}', file=sys.stderr)
              sys.exit(1)

      os.execvp(cmd[0], cmd)

    shell: python
    working-directory: ${{ inputs.working-directory }}
    if: inputs.install-only == 'false'
    env:
      EXTRA_ARGS: ${{ inputs.extra_args || inputs.extra-args }}
  - name: Show verbose logs
    run: |
      # Prek verbose logs

      echo "::group::Prek verbose logs"
      cache_dir="$(prek cache dir --no-log-file 2>/dev/null || echo ~/.cache/prek)"
      log="$cache_dir/prek.log"
      cat "$log" || echo "No prek log file found at $log"
      echo "::endgroup::"
    shell: bash
    if: inputs.install-only == 'false' && always()
branding:
  icon: 'git-commit'
  color: 'orange'
